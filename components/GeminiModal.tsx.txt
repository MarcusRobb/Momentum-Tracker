import React, { useState } from 'react';
import { GoogleGenAI } from "@google/genai";
import { Task } from '../types';
import { XIcon, ClipboardCopyIcon, SparkleIcon } from './Icons';

interface GeminiModalProps {
  task: Task;
  onClose: () => void;
}

const GeminiModal: React.FC<GeminiModalProps> = ({ task, onClose }) => {
  const [prompt, setPrompt] = useState('');
  const [response, setResponse] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [copyStatus, setCopyStatus] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim()) return;
    
    // Safely check for API key
    const apiKey = typeof process !== 'undefined' && process.env.API_KEY ? process.env.API_KEY : null;

    if (!apiKey) {
      setError("Gemini API Key is not configured. Please ensure it is set up correctly in your environment settings.");
      setIsLoading(false);
      return;
    }

    setIsLoading(true);
    setError(null);
    setResponse('');

    try {
      const ai = new GoogleGenAI({ apiKey });
      const fullPrompt = `Based on the following task, please help me with my request.\n\nTask: "${task.text}"\nTask Notes: "${task.notes || 'No notes'}"\n\nMy request is: "${prompt}"`;
      
      const result = await ai.models.generateContent({
        model: 'gemini-2.5-flash-preview-04-17',
        contents: fullPrompt,
      });

      setResponse(result.text);

    } catch (err) {
      console.error("Gemini API error:", err);
      setError("Sorry, something went wrong while contacting the AI. Please check the API Key and try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(response);
    setCopyStatus(true);
    setTimeout(() => setCopyStatus(false), 2000);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-2xl w-full max-w-2xl max-h-[90vh] flex flex-col">
        <header className="flex items-center justify-between p-4 border-b">
          <h2 className="text-xl font-bold text-slate-800 flex items-center gap-2">
            <SparkleIcon className="w-6 h-6 text-blue-500" />
            Work on Task with Gemini
          </h2>
          <button onClick={onClose} className="p-1 rounded-full text-slate-500 hover:bg-slate-100">
            <XIcon className="w-6 h-6" />
          </button>
        </header>
        
        <div className="p-6 overflow-y-auto">
          <div className="mb-4 bg-slate-50 p-4 rounded-lg border">
            <p className="text-sm font-semibold text-slate-600">Your Task:</p>
            <p className="text-slate-800">{task.text}</p>
          </div>

          <form onSubmit={handleSubmit}>
            <label htmlFor="gemini-prompt" className="block text-sm font-semibold text-slate-600 mb-2">
              What do you want to do with this task?
            </label>
            <textarea
              id="gemini-prompt"
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="e.g., 'Break this down into 5 smaller steps', 'Write a cold email about this', 'Brainstorm related ideas'..."
              rows={3}
              className="block w-full text-sm p-2 rounded-md border-slate-300 shadow-sm focus:ring-blue-500 focus:border-blue-500"
              required
            />
            <button
              type="submit"
              disabled={isLoading || !prompt.trim()}
              className="mt-3 w-full flex items-center justify-center gap-2 px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-blue-400 disabled:cursor-not-allowed"
            >
              {isLoading ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Thinking...
                </>
              ) : "Generate Response"}
            </button>
          </form>

          {error && <p className="mt-4 text-sm text-red-600 bg-red-50 p-3 rounded-md">{error}</p>}
          
          {response && (
            <div className="mt-6">
              <div className="flex justify-between items-center mb-2">
                <h3 className="text-sm font-semibold text-slate-600">AI Response:</h3>
                <button
                    onClick={handleCopy}
                    className="flex items-center gap-1.5 px-3 py-1 text-xs font-medium text-slate-600 bg-slate-100 rounded-md hover:bg-slate-200"
                >
                    <ClipboardCopyIcon className="w-3 h-3" />
                    {copyStatus ? 'Copied!' : 'Copy'}
                </button>
              </div>
              <div className="prose prose-sm max-w-none p-4 bg-slate-50 rounded-md border max-h-80 overflow-y-auto whitespace-pre-wrap">
                {response}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default GeminiModal;